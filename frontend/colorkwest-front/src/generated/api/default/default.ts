/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * openapi
 * OpenAPI spec version: 3.0.1
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  HTTPValidationError,
  Quest,
  User
} from '../../dto'
import { mutate } from '../../../mutator/mutate';


  
  type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Root
 */
export const rootGet = (
    
 options?: SecondParameter<typeof mutate>) => {
      return mutate<unknown>(
      {url: `/`, method: 'GET'
    },
      options);
    }
  


export const getRootGetKey = () => [`/`] as const;


export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown

/**
 * @summary Root
 */
export const useRootGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof rootGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof mutate> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getRootGetKey() : null);
  const swrFn = () => rootGet(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get Quests
 */
export const getQuestsQuestsGet = (
    
 options?: SecondParameter<typeof mutate>) => {
      return mutate<Quest[]>(
      {url: `/quests`, method: 'GET'
    },
      options);
    }
  


export const getGetQuestsQuestsGetKey = () => [`/quests`] as const;


export type GetQuestsQuestsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getQuestsQuestsGet>>>
export type GetQuestsQuestsGetQueryError = unknown

/**
 * @summary Get Quests
 */
export const useGetQuestsQuestsGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getQuestsQuestsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof mutate> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetQuestsQuestsGetKey() : null);
  const swrFn = () => getQuestsQuestsGet(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get User
 */
export const getUserUsersUserIdGet = (
    userId: number,
 options?: SecondParameter<typeof mutate>) => {
      return mutate<User>(
      {url: `/users/${userId}`, method: 'GET'
    },
      options);
    }
  


export const getGetUserUsersUserIdGetKey = (userId: number,) => [`/users/${userId}`] as const;


export type GetUserUsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserUsersUserIdGet>>>
export type GetUserUsersUserIdGetQueryError = HTTPValidationError

/**
 * @summary Get User
 */
export const useGetUserUsersUserIdGet = <TError = HTTPValidationError>(
  userId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUserUsersUserIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof mutate> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(userId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUserUsersUserIdGetKey(userId) : null);
  const swrFn = () => getUserUsersUserIdGet(userId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
